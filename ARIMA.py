# -*- coding: utf-8 -*-
"""ARIMA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YyCExKRSDaGfVFoFt-bUFl4o3XcwcH_R
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

import warnings
warnings.filterwarnings('ignore')

from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.stattools import acf, pacf
from statsmodels.tsa.arima.model import ARIMA
from datetime import datetime
import itertools
import warnings
warnings.filterwarnings("ignore", category=UserWarning)

arimadf = pd.read_csv('/content/Electric_Production.csv')
arimadf['Value'] = arimadf['Value'].astype(float)
arimadf['DATE'] = pd.to_datetime(arimadf['DATE'], infer_datetime_format=True)
arimadfind = arimadf.set_index('DATE')
arimadfind = arimadfind.asfreq('MS')

arimadf.shape

arimadf.info()

arimadfind = arimadf.set_index('DATE',inplace=False)

plt.figure(figsize=(10,5))
plt.xlabel('Date')
plt.ylabel('Electric Power Consumption')
plt.plot(arimadfind)

def test_stationarity(timeseries):

    #Determine rolling statistics
    movingAverage = timeseries.rolling(window=12).mean()
    movingSTD = timeseries.rolling(window=12).std()

    #Plot rolling statistics
    plt.figure(figsize=(10,5))
    plt.plot(timeseries, color='blue', label='Original')
    plt.plot(movingAverage, color='red', label='Rolling Mean')
    plt.plot(movingSTD, color='black', label='Rolling Std')
    plt.legend(loc='best')
    plt.title('Rolling Mean & Standard Deviation')
    plt.show(block=False)

    #Perform Dickeyâ€“Fuller test:
    print('Results of Dickey Fuller Test:')
    arimadf_test = adfuller(timeseries['Value'], autolag='AIC')
    dfoutput = pd.Series(arimadf_test[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])
    for key,value in arimadf_test[4].items():
        dfoutput['Critical Value (%s)'%key] = value
    print(dfoutput)

arimadf_log = np.log(arimadfind)
test_stationarity(arimadf_log)

arimadf_log_diff = arimadf_log - arimadf_log.shift()
arimadf_log_diff.dropna(inplace=True)
test_stationarity(arimadf_log_diff)

import warnings
warnings.filterwarnings("ignore", category=UserWarning)

rollmean_log = arimadf_log.rolling(window=12).mean()
rollstd_log = arimadf_log.rolling(window=12).std()

plt.figure(figsize=(10,5))
plt.plot(arimadf_log, color='blue', label='Original')
plt.plot(rollmean_log, color='red', label='Rolling Mean')
plt.plot(rollstd_log, color='black', label='Rolling Std')
plt.legend(loc='best')
plt.title('Rolling Mean & Standard Deviation (Logarithmic Scale)')

arimadf_new = arimadf_log - rollmean_log

arimadf_new.head()

arimadf_new.dropna(inplace=True)

arimadf_new.head()

test_stationarity(arimadf_new)

arimadf_log_diff = arimadf_log - arimadf_log.shift()
plt.figure(figsize=(10,5))
plt.plot(arimadf_log_diff)

arimadf_log_diff.dropna(inplace=True)
plt.figure(figsize=(10,5))
plt.plot(arimadf_log_diff)

test_stationarity(arimadf_log_diff)

decomposition = seasonal_decompose(arimadf_log)

trend = decomposition.trend
seasonal = decomposition.seasonal
residual = decomposition.resid

plt.figure(figsize=(10,5))
plt.subplot(411)
plt.plot(arimadf_log, label='Original')
plt.legend(loc='best')

plt.subplot(412)
plt.plot(trend, label='Trend')
plt.legend(loc='best')

plt.subplot(413)
plt.plot(seasonal,label='Seasonality')
plt.legend(loc='best')

plt.subplot(414)
plt.plot(residual, label='Residuals')
plt.legend(loc='best')
plt.tight_layout()

arimadf_decompose = residual
arimadf_decompose.dropna(inplace=True)

rollmean_decompose = arimadf_decompose.rolling(window=12).mean()
rollstd_decompose = arimadf_decompose.rolling(window=12).std()

plt.figure(figsize=(10,5))
plt.plot(arimadf_decompose, color='blue', label='Original')
plt.plot(rollmean_decompose, color='red', label='Rolling Mean')
plt.plot(rollstd_decompose, color='black', label='Rolling Std')
plt.legend(loc='best')
plt.title('Rolling Mean & Standard Deviation')

lag_acf = acf(arimadf_log_diff, nlags=20)
lag_pacf = pacf(arimadf_log_diff, nlags=20, method='ols')

#Plot ACF:
plt.subplot(121)
plt.plot(lag_acf)
plt.axhline(y=0, linestyle='--', color='gray')
plt.axhline(y=-1.96/np.sqrt(len(arimadf_log_diff)), linestyle='--', color='gray')
plt.axhline(y=1.96/np.sqrt(len(arimadf_log_diff)), linestyle='--', color='gray')
plt.title('Autocorrelation Function')

#Plot PACF
plt.subplot(122)
plt.plot(lag_pacf)
plt.axhline(y=0, linestyle='--', color='gray')
plt.axhline(y=-1.96/np.sqrt(len(arimadf_log_diff)), linestyle='--', color='gray')
plt.axhline(y=1.96/np.sqrt(len(arimadf_log_diff)), linestyle='--', color='gray')
plt.title('Partial Autocorrelation Function')

plt.tight_layout()

"""AR Model
(3,1,0)
"""

model1 = ARIMA(arimadf_log, order=(3,1,0))
results_AR = model1.fit()
plt.figure(figsize=(10,5))
plt.plot(arimadf_log_diff)
plt.plot(results_AR.fittedvalues, color='red')
plt.title('RSS: %.4f' % sum((results_AR.fittedvalues - arimadf_log_diff['Value'])**2))
print('Plotting AR model')

"""MA Model
(0,1,3)


"""

model2 = ARIMA(arimadf_log, order=(0,1,3))
plt.figure(figsize=(10,5))
results_MA = model2.fit()
plt.plot(arimadf_log_diff)
plt.plot(results_MA.fittedvalues, color='red')
plt.title('RSS: %.4f'%sum((results_MA.fittedvalues - arimadf_log_diff['Value'])**2))
print('Plotting MA model')

"""AR+I+MA
(3,1,3)
"""

model = ARIMA(arimadf_log, order=(3,1,3))
plt.figure(figsize=(10,5))
results_ARIMA = model.fit()
plt.plot(arimadf_log_diff)
plt.plot(results_ARIMA.fittedvalues, color='red')
plt.title('RSS: %.4f'%sum((results_ARIMA.fittedvalues - arimadf_log_diff['Value'])**2))
print('Plotting ARIMA model')

predictions_ARIMA_diff = pd.Series(results_ARIMA.fittedvalues, copy=True)
predictions_ARIMA_diff.head()

predictions_ARIMA_diff_cumsum = predictions_ARIMA_diff.cumsum()
predictions_ARIMA_diff_cumsum.head()

predictions_ARIMA_log = pd.Series(arimadf_log['Value'].iloc[0], index=arimadf_log.index)
predictions_ARIMA_log = predictions_ARIMA_log.add(predictions_ARIMA_diff_cumsum, fill_value=0)
predictions_ARIMA_log.head()

arimadf_log.head()

arimadf_log.shape

forecast_months = 72

last_date = arimadf_log.index[-1]
forecast_index = pd.date_range(start=last_date + pd.DateOffset(months=1), periods=forecast_months, freq='MS')

forecast = results_ARIMA.get_forecast(steps=forecast_months)
forecast_ci = forecast.conf_int()

plt.figure(figsize=(10, 5))
plt.plot(arimadf_log, label='Observed')
plt.plot(forecast_index, forecast.predicted_mean, color='red', label='Forecast')
plt.fill_between(forecast_index, forecast_ci.iloc[:, 0], forecast_ci.iloc[:, 1], color='pink', alpha=0.3)
plt.xlabel('Date')
plt.ylabel('Values')
plt.legend()
plt.show()

# Grid search for best ARIMA parameters
p = range(0, 4)  # Typically values 0 to 3
d = range(0, 2)  # Differencing order, often 0 or 1
q = range(0, 4)  # Moving average order, usually small
pdq = list(itertools.product(p, d, q))
best_aic = float("inf")
best_params = None

for param in pdq:
    try:
        model = ARIMA(arimadf_log, order=param)
        results = model.fit()
        print(f"ARIMA{param} - AIC: {results.aic}")
        if results.aic < best_aic:
            best_aic = results.aic
            best_params = param
    except Exception as e:
        print(f"ARIMA{param} - Error: {e}")
        continue

print(f"Best ARIMA parameters: {best_params} with AIC: {best_aic}")

# Fit the best ARIMA model
best_model = ARIMA(arimadf_log, order=best_params)
best_results = best_model.fit()

# Plot fitted values with observed data
plt.figure(figsize=(10,5))
plt.plot(arimadf_log_diff, label='Observed')
plt.plot(best_results.fittedvalues, color='red', label='Fitted Values')
plt.title(f'Best ARIMA Model RSS: {sum((best_results.fittedvalues - arimadf_log_diff["Value"])**2):.4f}')
plt.legend()
plt.show()

# Forecasting
forecast_months = 72
forecast = best_results.get_forecast(steps=forecast_months)
forecast_ci = forecast.conf_int()

# Index for future dates
last_date = arimadf_log.index[-1]
forecast_index = pd.date_range(start=last_date + pd.DateOffset(months=1), periods=forecast_months, freq='MS')

plt.figure(figsize=(10, 5))
plt.plot(arimadf_log, label='Observed')
plt.plot(forecast_index, forecast.predicted_mean, color='red', label='Forecast')
plt.fill_between(forecast_index, forecast_ci.iloc[:, 0], forecast_ci.iloc[:, 1], color='pink', alpha=0.3)
plt.xlabel('Date')
plt.ylabel('Values')
plt.legend()
plt.show()